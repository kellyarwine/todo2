// Test file for checkout.js
// Run with: node test

// Mock DOM elements and global objects
global.document = {
  getElementById: (id) => {
    if (id === 'country-select') {
      return { value: global.mockCountry || 'US' };
    }
    if (id === 'pay-button') {
      return { addEventListener: () => {} };
    }
    return null;
  }
};

global.window = {
  cart: {
    subtotal: 100,
    items: ['item1', 'item2'],
    total: null
  },
  location: { href: '' }
};

global.fetch = (url, options) => {
  return Promise.resolve({
    json: () => Promise.resolve({ success: true })
  });
};

// Define the CheckoutProcessor class for testing
class CheckoutProcessor {
  constructor(cart) {
    this.cart = cart;
    this.taxRates = {
      'US': 0.08,
      'CA': 0.13
    };
  }

  calculateTax(region) {
    const rate = this.taxRates[region];
    return this.cart.subtotal * rate;
  }

  processPayment() {
    const region = this.getUserRegion();
    const tax = this.calculateTax(region);
    
    // BUG: cart.total becomes null for regions not in taxRates
    this.cart.total = this.cart.subtotal + tax;
    
    // This breaks when cart.total is null
    const paymentData = {
      amount: this.cart.total.toFixed(2),
      currency: this.getCurrency(region),
      items: this.cart.items
    };

    return this.submitPayment(paymentData);
  }

  getUserRegion() {
    return document.getElementById('country-select').value;
  }

  getCurrency(region) {
    const currencies = {
      'US': 'USD',
      'CA': 'CAD',
      'GB': 'GBP',
      'DE': 'EUR',
      'FR': 'EUR'
    };
    return currencies[region] || 'USD';
  }

  submitPayment(data) {
    // Payment API call
    return fetch('/api/payments', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
  }
}

// Test suite
class TestRunner {
  constructor() {
    this.tests = [];
    this.passed = 0;
    this.failed = 0;
  }

  test(name, fn) {
    this.tests.push({ name, fn });
  }

  async run() {
    console.log('Running CheckoutProcessor Tests...\n');
    
    for (const test of this.tests) {
      try {
        await test.fn();
        console.log(`✓ ${test.name}`);
        this.passed++;
      } catch (error) {
        console.log(`✗ ${test.name}: ${error.message}`);
        this.failed++;
      }
    }
    
    console.log(`\nResults: ${this.passed} passed, ${this.failed} failed`);
    return this.failed === 0;
  }

  assert(condition, message) {
    if (!condition) {
      throw new Error(message);
    }
  }

  assertEqual(actual, expected, message) {
    if (actual !== expected) {
      throw new Error(`${message}: expected ${expected}, got ${actual}`);
    }
  }

  assertThrows(fn, message) {
    try {
      fn();
      throw new Error(`${message}: expected function to throw`);
    } catch (error) {
      // Expected to throw
    }
  }
}

const runner = new TestRunner();

// Test calculateTax method
runner.test('calculateTax returns correct tax for US', () => {
  const cart = { subtotal: 100, items: [], total: null };
  const processor = new CheckoutProcessor(cart);
  const tax = processor.calculateTax('US');
  runner.assertEqual(tax, 8, 'US tax should be 8% of subtotal');
});

runner.test('calculateTax returns correct tax for CA', () => {
  const cart = { subtotal: 100, items: [], total: null };
  const processor = new CheckoutProcessor(cart);
  const tax = processor.calculateTax('CA');
  runner.assertEqual(tax, 13, 'CA tax should be 13% of subtotal');
});

runner.test('calculateTax returns NaN for unknown regions (BUG)', () => {
  const cart = { subtotal: 100, items: [], total: null };
  const processor = new CheckoutProcessor(cart);
  const tax = processor.calculateTax('DE'); // Germany - not in taxRates
  runner.assert(isNaN(tax), 'Unknown region should return NaN tax (undefined * number = NaN)');
});

// Test getCurrency method
runner.test('getCurrency returns correct currency for US', () => {
  const cart = { subtotal: 100, items: [], total: null };
  const processor = new CheckoutProcessor(cart);
  const currency = processor.getCurrency('US');
  runner.assertEqual(currency, 'USD', 'US currency should be USD');
});

runner.test('getCurrency returns correct currency for DE', () => {
  const cart = { subtotal: 100, items: [], total: null };
  const processor = new CheckoutProcessor(cart);
  const currency = processor.getCurrency('DE');
  runner.assertEqual(currency, 'EUR', 'German currency should be EUR');
});

runner.test('getCurrency returns USD for unknown regions', () => {
  const cart = { subtotal: 100, items: [], total: null };
  const processor = new CheckoutProcessor(cart);
  const currency = processor.getCurrency('XX');
  runner.assertEqual(currency, 'USD', 'Unknown region should default to USD');
});

// Test processPayment method - successful case
runner.test('processPayment works for US region', async () => {
  global.mockCountry = 'US';
  const cart = { subtotal: 100, items: ['item1'], total: null };
  const processor = new CheckoutProcessor(cart);
  
  const result = await processor.processPayment();
  runner.assertEqual(cart.total, 108, 'Cart total should include tax');
});

// Test processPayment method - problematic case (EU region)
runner.test('processPayment sends invalid amount for EU region without tax rate', async () => {
  global.mockCountry = 'DE';
  const cart = { subtotal: 100, items: ['item1'], total: null };
  const processor = new CheckoutProcessor(cart);
  
  // Override submitPayment to capture the data being sent
  let capturedPaymentData = null;
  processor.submitPayment = (data) => {
    capturedPaymentData = data;
    return Promise.resolve({ success: true });
  };
  
  await processor.processPayment();
  
  // The bug: amount becomes "NaN" which is invalid
  runner.assertEqual(capturedPaymentData.amount, "NaN", 'Amount should be "NaN" for unknown region');
  runner.assertEqual(capturedPaymentData.currency, "EUR", 'Currency should still be correct');
  runner.assert(isNaN(cart.total), 'Cart total should be NaN');
});

// Test with different subtotal amounts
runner.test('calculateTax works with different subtotal amounts', () => {
  const cart = { subtotal: 250, items: [], total: null };
  const processor = new CheckoutProcessor(cart);
  const tax = processor.calculateTax('US');
  runner.assertEqual(tax, 20, 'Tax should scale with subtotal');
});

// Test with zero subtotal
runner.test('calculateTax works with zero subtotal', () => {
  const cart = { subtotal: 0, items: [], total: null };
  const processor = new CheckoutProcessor(cart);
  const tax = processor.calculateTax('US');
  runner.assertEqual(tax, 0, 'Tax should be zero for zero subtotal');
});

// Run all tests
runner.run().then(success => {
  if (success) {
    console.log('\n✅ All tests passed!');
    console.log('\n📋 Test Summary:');
    console.log('- Tests validate current checkout.js behavior');
    console.log('- BUG DETECTED: calculateTax() returns NaN for EU countries');
    console.log('- BUG DETECTED: processPayment() sends amount: "NaN" for EU regions');
    console.log('- This causes payment failures for EU users in production');
    console.log('\n🔧 To fix: Add tax rates for EU countries or default to 0% tax');
  } else {
    console.log('\n❌ Some tests failed - check test implementation');
  }
});
